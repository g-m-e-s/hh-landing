const featureData = [
    {
      icon: '<svg class="brutalist-icon" aria-hidden="true"><use href="/images/icon-sprite.svg#icon-feature-1"></use></svg>',
      title: "Escuta em tempo real",
      description: "Captura a consulta enquanto você conversa naturalmente com seu paciente.",
    },
    {
      icon: '<svg class="brutalist-icon" aria-hidden="true"><use href="/images/icon-sprite.svg#icon-feature-2"></use></svg>',
      title: "Gera prontuário estruturado",
      description: "Cria documentação clínica completa seguindo padrões médicos reconhecidos.",
    },
    {
      icon: '<svg class="brutalist-icon" aria-hidden="true"><use href="/images/icon-sprite.svg#icon-feature-3"></use></svg>',
      title: "Identifica padrões clínicos",
      description: "Reconhece sintomas, diagnósticos e tratamentos relevantes durante a consulta.",
    },
    {
      icon: '<svg class="brutalist-icon" aria-hidden="true"><use href="/images/icon-sprite.svg#icon-feature-4"></use></svg>',
      title: "Acompanha o paciente",
      description: "Ajuda a monitorar a evolução do paciente ao longo do tempo com histórico completo.",
    },
    {
      icon: '<svg class="brutalist-icon" aria-hidden="true"><use href="/images/icon-sprite.svg#icon-feature-5"></use></svg>',
      title: "Segurança e precisão",
      description: "Garante confidencialidade dos dados e alta precisão na documentação médica.",
    },
  ],
  comparisonData = [
    {
      feature: "Prontuário médico completo",
      description:
        "Gera documentação clínica estruturada com todos os elementos necessários para um prontuário completo.",
      competitors: [
        { name: "HEALTH/HEALTH", value: !0, note: "Prontuário completo com estrutura SOAP" },
        { name: "Dragon Copilot", value: "parcial", note: "Apenas transcrição, sem estruturação" },
        { name: "Read.AI", value: "parcial", note: "Resumo básico, foco em reuniões" },
        { name: "Google Meet/Zoom", value: !1, note: "Apenas transcrição básica" },
      ],
    },
    {
      feature: "Estrutura clínica",
      description: "Interpreta e organiza a informação em formatos clínicos padrão como SOAP, CID-10, etc.",
      competitors: [
        { name: "HEALTH/HEALTH", value: !0, note: "Reconhece automaticamente a estrutura SOAP" },
        { name: "Dragon Copilot", value: !1, note: "Sem estruturação clínica" },
        { name: "Read.AI", value: !1, note: "Sem conhecimento médico" },
        { name: "Google Meet/Zoom", value: !1, note: "Sem estruturação" },
      ],
    },
    {
      feature: "Conversa natural",
      description: "Funciona com diálogo natural entre médico e paciente, sem necessidade de comandos.",
      competitors: [
        { name: "HEALTH/HEALTH", value: !0, note: "100% natural, sem comandos" },
        { name: "Dragon Copilot", value: "parcial", note: "Requer comandos específicos" },
        { name: "Read.AI", value: !0, note: "Captura conversa natural" },
        { name: "Google Meet/Zoom", value: !0, note: "Transcrição automática" },
      ],
    },
    {
      feature: "Diagnóstico e plano",
      description: "Identifica e estrutura diagnósticos e planos de tratamento a partir da conversa.",
      competitors: [
        { name: "HEALTH/HEALTH", value: !0, note: "Extrai e organiza automaticamente" },
        { name: "Dragon Copilot", value: "parcial", note: "Identificação básica, pouco precisa" },
        { name: "Read.AI", value: !1, note: "Sem capacidade médica" },
        { name: "Google Meet/Zoom", value: !1, note: "Sem capacidade de análise" },
      ],
    },
    {
      feature: "Sem configuração",
      description: "Pronto para uso imediato, sem necessidade de treinamento ou configuração.",
      competitors: [
        { name: "HEALTH/HEALTH", value: !0, note: "Uso imediato sem configuração" },
        { name: "Dragon Copilot", value: !1, note: "Requer treinamento de voz" },
        { name: "Read.AI", value: !0, note: "Configuração simples" },
        { name: "Google Meet/Zoom", value: !0, note: "Ativação com um clique" },
      ],
    },
    {
      feature: "Criado por médicos",
      description: "Desenvolvido por profissionais médicos com experiência clínica real.",
      competitors: [
        { name: "HEALTH/HEALTH", value: !0, note: "Criado e testado em consultório real" },
        { name: "Dragon Copilot", value: !1, note: "Criado por engenheiros de software" },
        { name: "Read.AI", value: !1, note: "Foco em reuniões corporativas" },
        { name: "Google Meet/Zoom", value: !1, note: "Foco em videoconferência" },
      ],
    },
  ]
let currentSlide = 0,
  isAnimating = !1
const introAnimation = document.getElementById("intro-animation"),
  micContainer = document.querySelector(".mic-container"),
  audioWaves = document.querySelectorAll(".audio-wave"),
  typedText = document.querySelector(".typed-text"),
  typedContent = document.getElementById("typed-content"),
  cursor = document.querySelector(".cursor"),
  mainHeader = document.getElementById("main-header"),
  mobileMenuToggle = document.getElementById("mobile-menu-toggle"),
  mobileMenu = document.getElementById("mobile-menu"),
  menuIcon = document.getElementById("menu-icon"),
  closeIcon = document.getElementById("close-icon"),
  carouselTrack = document.getElementById("carousel-track"),
  carouselPrev = document.getElementById("carousel-prev"),
  carouselNext = document.getElementById("carousel-next"),
  carouselIndicators = document.getElementById("carousel-indicators"),
  tabButtons = document.querySelectorAll(".tab-button"),
  tabContents = document.querySelectorAll(".tab-content")
function createFeatureCards() {
  const e = document.querySelector(".features-grid")
  featureData.forEach((t) => {
    const a = document.createElement("div")
    ;(a.className = "feature-card"),
      (a.innerHTML = `
      <div class="feature-icon">${t.icon}</div>
      <h3>${t.title}</h3>
      <p>${t.description}</p>
    `),
      e.appendChild(a)
  })
}
function playIntroAnimation() {
  ;(document.body.style.overflow = "hidden"),
    setTimeout(() => {
      micContainer.classList.add("active"),
        setTimeout(() => {
          audioWaves.forEach((e) => e.classList.add("active")),
            setTimeout(() => {
              typedText.classList.add("active"),
                typeText("HH/IO"),
                setTimeout(() => {
                  completeIntroAnimation()
                }, 2500)
            }, 2e3)
        }, 800)
    }, 800)
}
function typeText(e) {
  let t = 0
  const a = setInterval(() => {
    t < e.length ? ((typedContent.textContent += e.charAt(t)), t++) : clearInterval(a)
  }, 100)
}
function completeIntroAnimation() {
  setTimeout(() => {
    ;(introAnimation.style.opacity = "0"),
      setTimeout(() => {
        ;(introAnimation.style.display = "none"), (document.body.style.overflow = "")
      }, 500)
  }, 500)
}
function handleScroll() {
  window.scrollY > 50 ? mainHeader.classList.add("scrolled") : mainHeader.classList.remove("scrolled")
}
function toggleMobileMenu() {
  mobileMenu.classList.toggle("active"),
    mobileMenu.classList.contains("active")
      ? (menuIcon.classList.add("hidden"), closeIcon.classList.remove("hidden"))
      : (menuIcon.classList.remove("hidden"), closeIcon.classList.add("hidden"))
}
function closeMobileMenuOnClick() {
  document.querySelectorAll(".mobile-nav-link").forEach((e) => {
    e.addEventListener("click", () => {
      mobileMenu.classList.remove("active"), menuIcon.classList.remove("hidden"), closeIcon.classList.add("hidden")
    })
  })
}
function initCarousel() {
  createCarouselSlides(),
    createCarouselIndicators(),
    updateCarousel(),
    carouselPrev.addEventListener("click", goToPrevSlide),
    carouselNext.addEventListener("click", goToNextSlide)
}
function createCarouselSlides() {
  comparisonData.forEach((e, t) => {
    const a = document.createElement("div")
    ;(a.className = "carousel-slide"), a.setAttribute("data-index", t)
    const n = document.createElement("div")
    n.className = "carousel-slide-header"
    const o = document.createElement("h3")
    o.textContent = e.feature
    const r = document.createElement("p")
    ;(r.textContent = e.description), n.appendChild(o), n.appendChild(r)
    const s = document.createElement("div")
    ;(s.className = "competitors-grid"),
      e.competitors.forEach((e) => {
        const t = document.createElement("div")
        ;(t.className = "competitor-card"), "HEALTH/HEALTH" === e.name && t.classList.add("featured")
        const a = document.createElement("div")
        a.className = "competitor-header"
        const n = document.createElement("div")
        n.className = "competitor-logo"
        const o = document.createElement("div")
        o.className = "competitor-logo-box"
        const r = document.createElement("span")
        ;(r.className = "competitor-name"),
          "HEALTH/HEALTH" === e.name && r.classList.add("featured"),
          (r.textContent = e.name),
          n.appendChild(o),
          n.appendChild(r)
        const i = document.createElement("div")
        ;(i.className = `competitor-value ${e.value}`), a.appendChild(n), a.appendChild(i)
        const c = document.createElement("p")
        ;(c.className = "competitor-note"),
          (c.textContent = e.note),
          t.appendChild(a),
          t.appendChild(c),
          s.appendChild(t)
      })
    const i = document.createElement("div")
    ;(i.className = "carousel-controls"),
      a.appendChild(n),
      a.appendChild(s),
      a.appendChild(i),
      carouselTrack.appendChild(a)
  })
}
function createCarouselIndicators() {
  comparisonData.forEach((e, t) => {
    const a = document.createElement("button")
    ;(a.className = "carousel-indicator"),
      a.setAttribute("data-index", t),
      a.setAttribute("aria-label", `Ir para slide ${t + 1}`),
      a.addEventListener("click", () => {
        goToSlide(t)
      }),
      carouselIndicators.appendChild(a)
  })
}
function updateCarousel() {
  carouselTrack.style.transform = `translateX(-${100 * currentSlide}%)`
  const e = document.querySelectorAll(".carousel-indicator")
  e.forEach((e, t) => {
    t === currentSlide ? e.classList.add("active") : e.classList.remove("active")
  })
}
function goToPrevSlide() {
  isAnimating ||
    ((isAnimating = !0),
    (carouselTrack.style.transition = "transform 0.3s ease-in-out"),
    (carouselTrack.style.transform = `translateX(-${100 * (currentSlide - 0.05)}%)`),
    (carouselTrack.style.opacity = "0"),
    setTimeout(() => {
      ;(currentSlide = 0 === currentSlide ? comparisonData.length - 1 : currentSlide - 1),
        (carouselTrack.style.transition = "none"),
        (carouselTrack.style.transform = `translateX(-${100 * currentSlide}%)`),
        (carouselTrack.style.opacity = "1"),
        setTimeout(() => {
          ;(carouselTrack.style.transition = "transform 0.3s ease-in-out"), (isAnimating = !1), updateCarousel()
        }, 50)
    }, 300))
}
function goToNextSlide() {
  isAnimating ||
    ((isAnimating = !0),
    (carouselTrack.style.transition = "transform 0.3s ease-in-out"),
    (carouselTrack.style.transform = `translateX(-${100 * (currentSlide + 0.05)}%)`),
    (carouselTrack.style.opacity = "0"),
    setTimeout(() => {
      ;(currentSlide = currentSlide === comparisonData.length - 1 ? 0 : currentSlide + 1),
        (carouselTrack.style.transition = "none"),
        (carouselTrack.style.transform = `translateX(-${100 * currentSlide}%)`),
        (carouselTrack.style.opacity = "1"),
        setTimeout(() => {
          ;(carouselTrack.style.transition = "transform 0.3s ease-in-out"), (isAnimating = !1), updateCarousel()
        }, 50)
    }, 300))
}
function goToSlide(e) {
  if (!isAnimating && e !== currentSlide) {
    isAnimating = !0
    const t = e > currentSlide ? 0.05 : -0.05
    ;(carouselTrack.style.transition = "transform 0.3s ease-in-out"),
      (carouselTrack.style.transform = `translateX(-${100 * (currentSlide + t)}%)`),
      (carouselTrack.style.opacity = "0"),
      setTimeout(() => {
        ;(currentSlide = e),
          (carouselTrack.style.transition = "none"),
          (carouselTrack.style.transform = `translateX(-${100 * currentSlide}%)`),
          (carouselTrack.style.opacity = "1"),
          setTimeout(() => {
            ;(carouselTrack.style.transition = "transform 0.3s ease-in-out"), (isAnimating = !1), updateCarousel()
          }, 50)
      }, 300)
  }
}
function initTabs() {
  tabButtons.forEach((e) => {
    e.addEventListener("click", () => {
      const t = e.getAttribute("data-tab")
      tabButtons.forEach((e) => {
        e.classList.remove("active")
      }),
        e.classList.add("active"),
        tabContents.forEach((e) => {
          e.classList.remove("active"), e.id === `tab-content-${t}` && e.classList.add("active")
        })
    })
  })
}
function init() {
  createFeatureCards(),
    playIntroAnimation(),
    window.addEventListener("scroll", handleScroll),
    mobileMenuToggle.addEventListener("click", toggleMobileMenu),
    closeMobileMenuOnClick(),
    initCarousel(),
    initTabs()
}
document.addEventListener("DOMContentLoaded", init)
